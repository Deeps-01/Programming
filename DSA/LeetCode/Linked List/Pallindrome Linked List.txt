/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if (!head)
            return nullptr;
        if (!head->next)
            return head;
        
        ListNode* currNode = head;
        ListNode* tail { new ListNode(head->val) };
        
        while (currNode)
        {
            if (!currNode->next)
                break;
            
            ListNode* newTail { new ListNode(currNode->next->val, tail) };
            tail = newTail;
            currNode = currNode->next;
        }
        
        return tail;
    }
    
    bool isPalindrome(ListNode* head) {
        ListNode* tail = reverseList(head);
        
        while (head && tail)
        {
            if (head->val != tail->val)
                return false;
            
            head = head->next;
            tail = tail->next;
        }
        
        return true;
    }
};